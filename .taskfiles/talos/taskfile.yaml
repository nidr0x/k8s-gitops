---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_CLUSTER_DIR: "{{.ROOT_DIR}}/bootstrap/talos/clusterconfig"
  TALHELPER_CONFIG_FILE: "{{.ROOT_DIR}}/bootstrap/talos/talconfig.yaml"
  TALHELPER_SECRET_FILE: "{{.ROOT_DIR}}/bootstrap/talos/talsecret.yaml"
  TALOSCONFIG: "{{.TALHELPER_CLUSTER_DIR}}/talosconfig"

env:
  TALOSCONFIG: "{{.TALOSCONFIG}}"

tasks:
  reset-node:
    desc: Reset Talos on a single node [CLUSTER=main] [HOSTNAME=required]
    prompt: Reset Talos node '{{.HOSTNAME}}' on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info

  generate-config:
    desc: Generate Talos configuration
    cmd: talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [HOSTNAME=required]
    cmds:
      - talosctl --nodes {{.HOSTNAME}} apply-config --mode={{.MODE}} --file {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      CLUSTER_NAME:
        sh: yq '.clusterName' {{.TALHELPER_CONFIG_FILE}}
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [HOSTNAME]
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info
      - test -f {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  upgrade-node:
    desc: Upgrade Talos on a single node [IP=required]
    cmds:
      - |
        TALOS_VERSION=$(yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}})
        NODE_NAME=$(kubectl get nodes -o jsonpath='{range .items[*]}{@.status.addresses[?(@.type=="InternalIP")].address}{"\t"}{@.metadata.name}{"\n"}{end}' | grep "^{{.IP}}" | cut -f2)
        TALOS_SCHEMATIC_ID=$(kubectl get node ${NODE_NAME} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}')
        TALOS_SECUREBOOT=$(talosctl --nodes {{.IP}} get securitystate --output=jsonpath='{.spec.secureBoot}')
        SECURE_BOOT_SUFFIX=""
        if [ "$TALOS_SECUREBOOT" = "true" ]; then
          SECURE_BOOT_SUFFIX="-secureboot"
        fi
        talosctl --nodes {{.IP}} upgrade --image="factory.talos.dev/installer${SECURE_BOOT_SUFFIX}/${TALOS_SCHEMATIC_ID}:${TALOS_VERSION}" --timeout=10m
      - talosctl --nodes {{.IP}} health --wait-timeout=10m --server=false
    requires:
      vars: [IP]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/v$(yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}} | sed 's/^v//')
      - talosctl --nodes {{.IP}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which kubectl talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  reboot-node:
    desc: Reboot Talos on a single node [CLUSTER=main] [IP=required] [MODE=default]
    cmds:
      - task: down
      - talosctl --nodes {{.IP}} reboot --mode={{.MODE}}
      - talosctl --nodes {{.IP}} health --wait-timeout=10m --server=false
      - task: up
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [CLUSTER, IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which talosctl
